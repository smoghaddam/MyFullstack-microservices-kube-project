Description: >
  elipeople Kubernetes fullstack infrastructure

Parameters:
  ID:
    Description: Unique identifier.
    Type: String

  EnvironmentName:
      Description: an environment name that will be prefixed to resources
      Type: String
  VpcCIDR:
      Description: Please enter the ip range for this vpc
      Type: String
      Default: 11.0.0.0/16
  PrivateSubnet1CIDR:
      Description: Please enter the ip range for this subnet
      Type: String
      Default: 11.0.1.0/24
  PrivateSubnet2CIDR:
      Description: Please enter the ip range for this subnet
      Type: String
      Default: 11.0.2.0/24
  PublicSubnet1CIDR:
      Description: Please enter the ip range for this subnet
      Type: String
      Default: 11.0.3.0/24
  PublicSubnet2CIDR:
      Description: Please enter the ip range for this subnet
      Type: String
      Default: 11.0.4.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ID}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ID}-IG

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ID}- Public Subnet {AZ1}
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}-${ID}-Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-${ID}
      GroupDescription: Allow port 22 and 80 to 40000.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 40000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ID}-SG

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.medium
      NetworkInterfaces:
      - AssociatePublicIpAddress: "true"
        DeviceIndex: 0
        GroupSet:
          - Ref: InstanceSecurityGroup
        SubnetId: !Ref PublicSubnet1
      KeyName: MyDevKeyPair # If you use another key pair name, you should change this value to match.
      # If this ami id is not available for you, you can find another (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html)
      # Ubuntu 18 or higher works fine
      ImageId: ami-063d4ab14480ac177
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '25'
            DeleteOnTermination: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-KubeProjectInstance-${ID}