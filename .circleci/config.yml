# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  projectname:
    type: string
    default: myfullstack-ms-docker-prj

# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@0.1.13

commands:
  install-dependencies-awscli:
    description: Install dependencies on aws-cli docker image
    parameters:
      extended:
        default: "no"
        type: string
    steps:
      - run:
          name: add tar and gzip sudo and node tool
          become: true
          command: |
            yum install -y tar gzip sudo
            curl â€“sL https://rpm.nodesource.com/setup_10.x | sudo -E bash -

  install-dependencies-onbase:
    description: Install dependencies on base docker image
    parameters:
      withnode:
        default: "no"
        type: string
    steps:
      - run:
          name: executing updates also for ansible and python3
          command: |
            sudo apt-get -y update
            sudo apt-get -y install software-properties-common
            sudo apt-get -y install ansible curl
            sudo apt-get -y install python3-venv python-is-python3
            if [[ << parameters.withnode >> == "yes" ]]
            then
              sudo apt-get -y install nodejs npm
            fi

  destroy-environment-onfail:
    description: Destroy docker cloudformation stacks given a workflowID.
    parameters:
      # Add parameter here
      cfname:
        default: "none"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "<<parameters.cfname>>"

# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  realize-configure-kube-cluster:
    # Run the welcome/run job in its own container
    jobs:
      - testutils:
          filters:
            branches:
              only: [test]
      - deploy-infrastructure:
          filters:
            branches:
              only: [main]
      - configure-docker:
          requires: [deploy-infrastructure]
      - build-and-lint:
          requires: [configure-docker]
      - configure-kubernetes:
          requires: [build-and-lint]
      # - configure-hadolint:
      #     requires: [configure-infrastructure]


jobs:
# with rollback - amazon/aws-cli with persistance
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - install-dependencies-awscli

      - run:
          name: Creating backend servers
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/elipeople-infra.yml \
              --tags project=<<pipeline.parameters.projectname>> \
              --stack-name "kube-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" EnvironmentName="elipeople-kube-fstackinfra" \
              VpcCIDR="10.0.0.0/16" PrivateSubnet1CIDR="10.0.1.0/24" PublicSubnet1CIDR="10.0.3.0/24"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[docker]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
             --filters "Name=tag:Name,Values=KubeProjectInstance-${CIRCLE_WORKFLOW_ID:0:7}" \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            cp .circleci/ansible/inventory.txt /tmp/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/
      - save_cache:
          key: mydockerutils-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - /tmp/inventory.txt

#      - destroy-environment-onfail:
#          cfname: "kube-stack-${CIRCLE_WORKFLOW_ID:0:7}"

  configure-docker:
    docker:
      - image: cimg/base:2021.01
    parameters:
      pyenvname:
        type: string
        default: mydatascience
    steps:
      # Checkout code from git
      - checkout
      - install-dependencies-onbase
      - aws-cli/install
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprint: ["b9:cc:7c:72:0f:26:e0:19:33:f4:26:2c:94:77:a1:e7"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: configure the server user
          no_output_timeout: 30m
          environment:
            DOCKER_HUB_PWD: $MY_DOCK_PWD
          command: |
            ansible-playbook .circleci/ansible/configure-docker.yml -i .circleci/ansible/inventory.txt --extra-vars "envname=<< parameters.pyenvname >> dockhub=$MY_DOCK_PWD"

  build-and-lint:
    docker:
      - image: cimg/base:2021.01
    parameters:
      pyenvname:
        type: string
        default: mydatascience
    steps:
      # Checkout code from git
      - checkout
      - install-dependencies-onbase
      - aws-cli/install
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprint: ["b9:cc:7c:72:0f:26:e0:19:33:f4:26:2c:94:77:a1:e7"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: configure the server user
          no_output_timeout: 30m
          environment:
            DOCKER_HUB_PWD: $MY_DOCK_PWD
          command: |
            ansible-playbook .circleci/ansible/build-and-lint.yml -i .circleci/ansible/inventory.txt --extra-vars "envname=<< parameters.pyenvname >> dockhub=$MY_DOCK_PWD"

  configure-kubernetes:
    docker:
      - image: cimg/base:2021.01
    parameters:
      pyenvname:
        type: string
        default: mydatascience
    steps:
      # Checkout code from git
      - checkout
      - install-dependencies-onbase
      - aws-cli/install
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprint: ["b9:cc:7c:72:0f:26:e0:19:33:f4:26:2c:94:77:a1:e7"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: configure the server user
          no_output_timeout: 30m
          environment:
            DOCKER_HUB_PWD: $MY_DOCK_PWD
          command: |
            ansible-playbook .circleci/ansible/configure-kubernetes.yml -i .circleci/ansible/inventory.txt --extra-vars "envname=<< parameters.pyenvname >> dockhub=$MY_DOCK_PWD"

      # Here's where you will add some code to rollback on failure
#      - destroy-environment-onfail:
#          cfname: "kube-stack-${CIRCLE_WORKFLOW_ID:0:7}"
  configure-hadolint:
    docker:
      - image: cimg/base:2021.01
    parameters:
      pyenvname:
        type: string
        default: mydatascience

    steps:
      # Checkout code from git
      - checkout
      - install-dependencies-onbase
      #- aws-cli/install
      - restore_cache:
          keys:
            - mydockerutils-
            - v1-dependencies-

      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprint: ["b9:cc:7c:72:0f:26:e0:19:33:f4:26:2c:94:77:a1:e7"]
      # attach workspace
      - run:
          name: configure the server user
          no_output_timeout: 30m
          command: |
            ansible-playbook .circleci/ansible/configure-linter.yml -i  /tmp/inventory.txt --extra-vars "envname=<< parameters.pyenvname >>"

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum ".circleci/ansible/roles/build-by-lint/files/requirements.txt" }}


  testutils:
    docker:
      - image: cimg/base:2021.01
    steps:
      # Checkout code from git
      - checkout
      - install-dependencies-onbase
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprint: ["b9:cc:7c:72:0f:26:e0:19:33:f4:26:2c:94:77:a1:e7"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: configure the server user
          no_output_timeout: 30m
          command: |
            ansible-playbook .circleci/ansible/test-configuration.yml -i .circleci/ansible/inventory.txt